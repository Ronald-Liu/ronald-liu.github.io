<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.6">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2016-08-10T00:05:46+08:00</updated><id>/</id><title>Ronald的部落格</title><subtitle>一个人的博物馆</subtitle><entry><title>（重新）迁移到Jekyll</title><link href="/2016/222/migrate_to_jekyll.html" rel="alternate" type="text/html" title="（重新）迁移到Jekyll" /><published>2016-08-09T00:00:00+08:00</published><updated>2016-08-09T00:00:00+08:00</updated><id>/2016/222/migrate_to_jekyll</id><content type="html" xml:base="/2016/222/migrate_to_jekyll.html">&lt;h1 id=&quot;section&quot;&gt;前传&lt;/h1&gt;
&lt;p&gt;这博客大概两三年没有更新了，突然感觉是时候重新拾起来了。之前出于对Python的执念强行把生成器从Jekyll换成了Pelican。回头发现真还是Jekyll的社区比较发达，最终又重新换回了Jekyll，真是怨念啊。本篇博文就来说说配置Jekyll写作环境的事情。&lt;/p&gt;

&lt;h1 id=&quot;jekyll&quot;&gt;配置Jekyll&lt;/h1&gt;

&lt;h2 id=&quot;section-1&quot;&gt;安装&lt;/h2&gt;

&lt;p&gt;首先你需要有基本的Ruby运行环境和Gem&lt;br /&gt;
之后安装Bundler  &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install bundler&lt;/code&gt;并且安装Jekyll和它依赖的所有包。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;配置网站&lt;/h2&gt;

&lt;p&gt;Jekyll作为一个静态网站生成器，具有极其功能的同时，配置上也有相当的复杂性。因此建立一个博客最简单的方式就是克隆已有的主题，进行一定的自定义配置，然后将自己的博文直接拷贝进去。&lt;br /&gt;
博主使用的主题是&lt;a href=&quot;https://mademistakes.com/work/hpstr-jekyll-theme/&quot;&gt;HPSTR&lt;/a&gt;，可以直接从它的Github主页上克隆，或下载源代码包到本地目录。通过修改_config.yml文件来定制自己的博客 &lt;br /&gt;
博客文章全部放置在 &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt;目录中，可以看看主题自带的一些示例文章来学习具体的语法。&lt;br /&gt;
虽然GitHub提供了Jekyll的环境，博主作为控制欲爆棚的汉子还是希望编译的过程运行在本地，也方便前期网站参数的调试。而为了方便将编译完之后的文件推送到GitHub Pages上，可以将自己的Github Pages(路径是xxx.github.io的那个)clone到源文件目录的&lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt;目录中，这样每次进行Jekyll编译之后，只需要在&lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt;目录中执行&lt;code class=&quot;highlighter-rouge&quot;&gt;git add .&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt;就可以完成Github Pages的更新&lt;br /&gt;
最后，为了更准确的估计中文文档的阅读时间，我们需要调整默认的阅读时间估算程序。方法是修改&lt;code class=&quot;highlighter-rouge&quot;&gt;_includes/read-time.html&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes/read-time-index.html&lt;/code&gt;，将其中的&lt;code class=&quot;highlighter-rouge&quot;&gt;number_of_words&lt;/code&gt;替换为size即可。&lt;/p&gt;

&lt;h1 id=&quot;emacs&quot;&gt;配置Emacs&lt;/h1&gt;
&lt;p&gt;Hyde.el是一个Emacs上用于管理Jekyll博客的Mode。它包含了一个前端，一个管理版本的后端和一个可以对写作过程做提示的Markdown编辑模式。本章介绍在MacOS环境下配置Hyde.el的过程。
请首先确认已经安装好了Markdown Mode&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;安装&lt;/h2&gt;
&lt;p&gt;要配置Hyde.el，首先需要下载&lt;a href=&quot;https://github.com/nibrahim/Hyde/archive/master.zip&quot;&gt;Hyde.el&lt;/a&gt;。解压到emacs.d的目录下。然后在自己的配置文件中添加下面的句子&lt;/p&gt;

&lt;div class=&quot;language-common_lisp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;add-to-list&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&#39;load-path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;config-directory&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/hyde/hyde*.el&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&#39;hyde&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;博主只维护了一个博客，因此可以在Emacs配置文件中配置一个默认的博客源路径，免得每次启动都要指定这个路径。在配置文件中加入&lt;/p&gt;

&lt;div class=&quot;language-common_lisp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hyde-home&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;path/to/your/blog/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hyde/jekyll-command&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bundle exec jekyll build&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;千万注意这个路径最后需要加上’/’，否则会报错&lt;/em&gt;
&lt;em&gt;jekyll-command命令并不是必须的，然而在我的MacOS中直接运行jekyll会报依赖错误。由于本人对Ruby实在不了解，于是就用了这个笨办法。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;在当前的Hyde.el版本(a8cd6ed)中，存在无法读取默认博客源文件路径的问题，需要修改Hyde.el最后部分&lt;/p&gt;

&lt;div class=&quot;language-common_lisp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;jekyll-root&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;home&lt;/span&gt;  
                          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hyde/ask-for-jekyll-root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;为&lt;/p&gt;

&lt;div class=&quot;language-common_lisp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;jekyll-root&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hyde-home&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;home&lt;/span&gt;  
                          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hyde/ask-for-jekyll-root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Hyde提供了部署静态网站的快捷键，然而由于不同的网站部署的方式不尽相同，因此需要对Hyde进行对应的配置来让你的网站可以根据需要来进行部署。&lt;br /&gt;
前文介绍的Jekyll部署方式使用的是本地编译静态网站，而不是利用Github Pages内置的Jekyll。因此部署工作也就是直接将编译完的网站推送到本人的Github Repo中。为了完成这一点，需要对网站的部署命令进行自定义。方法是在blog源文件主目录内创建&lt;code class=&quot;highlighter-rouge&quot;&gt;.hyde.el&lt;/code&gt;文件，并填入下列命令&lt;/p&gt;

&lt;div class=&quot;language-common_lisp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;hyde/deploy-command&lt;/span&gt;   
    &lt;span class=&quot;s&quot;&gt;&quot;cd path/to/your/blog/_site; git add -A . ; git commit -m autopost`date +%m%d%Y%H%M%S`;git push&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;替换其中的path/to/your/blog为你的源文件目录&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;使用&lt;/h2&gt;
&lt;p&gt;在需要写博客时，打开Emacs，执行M-x hyde，即可打开Hyde Mode。在设置了默认路径的情况下，不需要输入即可自动进入Major Mode界面。使用光标操作可以选择文件，回车打开文件。&lt;/p&gt;

&lt;p&gt;在Major Mode下的主要操作有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;n 新建新的草稿&lt;/li&gt;
  &lt;li&gt;c 提交当前文章，&lt;em&gt;输入文章标题时尽量用英文，以便生成英文的文章文件名，进入编辑模式后再修改title字段来修改文章标题&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;P 推送所有未提交的commit（只是版本控制的提交，并非部署)&lt;/li&gt;
  &lt;li&gt;j 运行Jekyll&lt;/li&gt;
  &lt;li&gt;d 部署该博客&lt;/li&gt;
  &lt;li&gt;g 刷新博客&lt;/li&gt;
  &lt;li&gt;p 将一个草稿提交为一个文章&lt;/li&gt;
  &lt;li&gt;q 退出Hyde&lt;/li&gt;
  &lt;li&gt;RET 打开指定文件进行编辑。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在文章编辑Mode下的操作有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;C-c C-c 保存并提交文件&lt;/li&gt;
  &lt;li&gt;C-c C-v 预览文件，只能包含Markdown预览，无法对Liquid Tags做预览。&lt;/li&gt;
  &lt;li&gt;C-c C-i 向文章中插入文件，该图片文件会自动拷贝到最终发布的网站中，十分方便&lt;/li&gt;
&lt;/ul&gt;</content><category term="Emacs" /><summary>前传
这博客大概两三年没有更新了，突然感觉是时候重新拾起来了。之前出于对Python的执念强行把生成器从Jekyll换成了Pelican。回头发现真还是Jekyll的社区比较发达，最终又重新换回了Jekyll，真是怨念啊。本篇博文就来说说配置Jekyll写作环境的事情。</summary></entry><entry><title>在Visual Studio 2013上编译boost 1.55</title><link href="/2013/315/vs2013-boost.html" rel="alternate" type="text/html" title="在Visual Studio 2013上编译boost 1.55" /><published>2013-11-11T00:00:00+08:00</published><updated>2013-11-11T00:00:00+08:00</updated><id>/2013/315/vs2013-boost</id><content type="html" xml:base="/2013/315/vs2013-boost.html">&lt;p&gt;在Visual Studio 2013(msvc12)上编译boost 1.55确实不是很容易。网上的教程大多过于陈旧，还有几个与VS不兼容的问题还没有修复。这篇文章总结了如何编译安装64位版本的boost 1.55 beta 1、修复一些小Bug，以及如何设置Visual Studio进行boost开发。其中某些不兼容问题在1.54版本中依然存在，同样可以用本文中的方法解决。&lt;/p&gt;

&lt;h1 id=&quot;boost&quot;&gt;下载boost&lt;/h1&gt;

&lt;p&gt;下载地址在&lt;a href=&quot;http://sourceforge.net/projects/boost/files/boost/1.55.0.beta.1/&quot;&gt;这里&lt;/a&gt;
下载7z比较小，实测在Windows上使用完全没有问题。另外需要注意的是，某些编译程序对中文的支持不完全，解压路径里不要含有中文。&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;生成编译工具&lt;/h1&gt;
&lt;p&gt;其实也不能算是编译工具啦，只是一个静态版的Makefile。
首先打开命令提示符，需要注意的是，如果boost解压在系统目录（如Program Files目录），打开命令提示符必须选择以管理员身份打开。比较简单的方法是按Win+x键。在弹出的菜单里选“命令提示符（管理员）”。
然后，切换到boost解压到的目录。输入命令bootstrap.bat回车。大概一两分钟的样子就可以生成出b2和bjam两个可执行文件。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;一点修改&lt;/h2&gt;
&lt;p&gt;在我的编译过程中出现了一下几个错误，各位可以在编译之前先修改源代码，避免走弯路。两个Bug的ticket在&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9196&amp;gt;&quot;&gt;这里&lt;/a&gt;和&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9205&quot;&gt;这里&lt;/a&gt;。
简单来说，需要修改的文件包括boost/mpl/assert.hpp和boost/archive/iterators/transform_width.hpp。其中
boost/mpl/assert.hpp, line 137:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#if BOOST_WORKAROUND(BOOST_MSVC, &amp;gt;= 1700)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;改为&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#if BOOST_WORKAROUND(BOOST_MSVC, == 1700)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;boost/archive/iterators/transform_width.hpp 最开始增加&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&amp;lt;algorithm&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;boost-1&quot;&gt;开始编译boost&lt;/h2&gt;
&lt;p&gt;用下面的命令开始编译boost&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;b2 -j4
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;j4命令可以打开4线程并行编译（跟make一样~）。
根据自己的应用特点可以编译特定的变种。比如如果只需要编译64位版本，就需要在参数中增加address-model=64。根据我自己的需要，我选择了只编译64位release库，4进程并行编译。具体命令是&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;b2 -q address-model&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;64 &lt;span class=&quot;nv&quot;&gt;toolset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;msvc &lt;span class=&quot;nv&quot;&gt;variant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;release -j4
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中-q表示如果出现错误立即停止，这样有利于提早发现并解决boost中的Bug。
编译，根据计算机的速度，可能会消耗10-40分钟不等的时间。&lt;/p&gt;

&lt;h1 id=&quot;visual-studiovc&quot;&gt;设置Visual Studio(VC)项目&lt;/h1&gt;
&lt;p&gt;打开需要使用Boost的项目，选择项目-&amp;gt;XX(你的项目名)属性，在平台中选择正确的平台(如果是64位系统需要选择x64)，选择正确的配置(如果使用release版本的库则选择Release)。在左侧的树状图中选择配置属性-&amp;gt;VC++目录。添加包含目录和库目录。假设boost解压完成的根目录为%boostRoot%（在我这里是D:\Program Files\boost\boost_1_55_0b1），则包含目录应该添加%boostRoot%，而库目录应该添加%boostRoot%\stage\lib。
完成设置后可以用以下程序来测试设置是否正确&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;boost/thread/thread.hpp&amp;gt;
#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello world, I&#39;m a thread!&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thrd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;thrd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><category term="Visual Studio" /><category term="boost" /><category term="C/C++" /><summary>在Visual Studio 2013(msvc12)上编译boost 1.55确实不是很容易。网上的教程大多过于陈旧，还有几个与VS不兼容的问题还没有修复。这篇文章总结了如何编译安装64位版本的boost 1.55 beta 1、修复一些小Bug，以及如何设置Visual Studio进行boost开发。其中某些不兼容问题在1.54版本中依然存在，同样可以用本文中的方法解决。</summary></entry><entry><title>中国梦 宪政梦</title><link href="/2013/004/2013newyear.html" rel="alternate" type="text/html" title="中国梦 宪政梦" /><published>2013-01-04T00:00:00+08:00</published><updated>2013-01-04T00:00:00+08:00</updated><id>/2013/004/2013newyear</id><content type="html" xml:base="/2013/004/2013newyear.html">&lt;p&gt;南方周末2013年新年献辞，转载防河蟹&lt;/p&gt;

&lt;p&gt;天地之间，时间绽放。 
这是我们在2013年的第一次相见，愿你被梦想点亮。 
2012年，你守护自己的生活，他们守护自己的工作。守护这份工作，就是在守护他们对生活的梦想。 
2012年，庙堂之上发出的宪政强音嗡然回响：“宪法的生命在于实施，宪法的权威也在于实施。”我们期待宪法长出牙齿，宪政早日落地。惟如此，才能成就这个沧桑古国的艰难转型；惟如此，国家与人民，才能重新站立于坚实的大地之上。&lt;/p&gt;

&lt;p&gt;今天，已是能够梦想的中国，今天，已是兑现梦想的时代。经历过宪政缺失的“文革”梦魇，我们花费三十多年的时间来逐渐回归常理与常情。从土地联产承包责任制到个体户、乡镇企业到“民企”，稍稍归还国人自主安排生活的权利，我们便创造了繁华城市，收获了满仓粮食。 
我们重新体认什么是真，什么是假，是其是，非其非；我们重燃对公义的热爱，对自由的向往。面对暴虐强力，我们双手相握，一起走过艰难时刻，迎接生活转机。
今天，我们终于可以从厚厚的历史尘埃中挺起胸，从琐碎的日常生活中抬起头，重走先辈的宪政长征，重温先辈的伟大梦想。 
一百七十多年前，我们开始从天朝上国的迷梦中醒来。先败于英，后败于日。百姓愈加民不聊生，耻感深深刺痛中国士人。保国！保种！由洋务而君宪，由立宪而革命。从器物到制度再至文化，激愤者不惜彻底打倒“孔家店”，决绝地将自己的文明连根拔起。&lt;br /&gt;
辛亥革命后，清帝退位，先辈们终于建立了亚洲第一个共和国。但是，一个自由、民主、富强的宪政中国并没有随之而来。&lt;br /&gt;
国家内外，战争连连；人群内外，残酷不断。&lt;br /&gt;
一度，人们远离仁，远离义，远离天道，远离对自由的坚守。 
一度，人们认错为对，指鹿为马，万千生灵生机断绝。 
美梦与山河，齐齐破碎。自由与宪政，双双消隐。 
度尽人世劫波，深味人性幽暗，我们依然是能做梦的人，有颗能做梦的心。 
今天，我们断断不只梦想物质丰盛，更希望性灵充盈；我们断断不只梦想国力能强盛，更希望国民有自尊。新民和新国，救亡与启蒙，谁也离不开谁，谁也不能压倒谁。而宪政便是这一切美梦的根基。&lt;br /&gt;
兑现宪政，坚守权利，人人才能心如日月流光溢彩；鳏寡孤独才能感受冬日暖意而非瑟瑟发抖；“城管”与小贩才能谈笑风生；房屋才能成为自己与家人的城堡；&lt;br /&gt;
兑现宪政，限权分权，公民们才能大声说出对公权力的批评；每个人才能依内心信仰自由生活；我们才能建成一个自由的强大国家。&lt;br /&gt;
兑现宪政大梦，每个人才能做好个人的美梦。而这需要我们就从手边做起，就从守护此时此刻的生活做起，而不要将重任留给子孙。&lt;br /&gt;
很多人一直深深懂得这一点，很多人早就努力践行这一点。&lt;br /&gt;
不是杰出者才做梦，是善于做梦者才杰出。&lt;br /&gt;
你的天赋权利就是可以梦想，并且兑现梦想！&lt;br /&gt;
为你的梦想鼓掌，为这个国家的梦想加油，这就是很多新闻人的梦想，是他们不大不小的野心。他们忠于新闻，更忠于内心。愿你也有个玫瑰色的美梦；自由成就自己，完成天之所赋。&lt;/p&gt;

&lt;p&gt;总会梦想人人都可以做一个有尊严的人，不论身居高位，还是街头卖艺；&lt;br /&gt;
总会梦想人人内心有爱，即使罪犯也未必穷凶极恶，总有恻隐之心自由闪动； 
总会梦想阶层只是引人自由流动的动力，而不再是相互猜忌和仇视的天堑；总会梦想这五千年文明生生不息，为改善人类的现代处境，捧出一掬甘冽清泉……&lt;br /&gt;
兑现这一千一万个梦想，才能抚平这一百多年的刻骨痛楚。&lt;br /&gt;
兜兜转转一百七十年，美梦成真何其难！一百七十年后，依然有人渴望良知萌新芽，重温天命之谓性；依然有人坚持要求权利一一落地，政治复归于正，公义自在流淌。&lt;br /&gt;
依然有人相信，不管多难，梦想终会落实为宪政良制，风行为敦敦美俗。&lt;br /&gt;
先辈们筚路蓝缕，践义成仁。如今，后人承继其志，燃灯前行。&lt;br /&gt;
兑现梦想，自然要借鉴前贤智慧，与古人的信仰、习俗和情感和解。儒释道法墨，百家皆是源泉；周汉唐宋明，代代皆有可取。&lt;br /&gt;
但这决不是要复古，古人不能给予今天所需的一切。只是不再轻易贬损先辈，平心静气地吸收转进，以让中华文明开新花，结新果。 
兑现梦想，自然要吸取世界经验。所以要认真审视希腊民主，罗马法治，借鉴英美宪政，追赶现代科技文明。&lt;br /&gt;
但这也不是仅仅作一个西方文明的优等生，西人有西人演进的轨迹，同样未必能直接给予我们今天所需的一切。&lt;br /&gt;
我们要站在自己的大地上，与各国人民一起，生活出一种古今相融的新生活，文明出一种中西合璧的新文明。在古今中西的激荡中，要遵循人类共通的价值，也要不惮于做自己的新梦。&lt;br /&gt;
称美古人，赞扬邻居，不是因为他们足够完美，而是因为我们熟悉他们眼中洋溢的快乐，心底流淌的自由。 
中国人本应就是自由人。中国梦本应就是宪政梦。&lt;br /&gt;
宪政之下，才能国家持续强盛，宪政之下，才有人民真正强大。兑现宪政梦想，才能更好地外争国权，维护国家的自由；才能更好地内争民权，维护人民的自由。而国家的自由最终必得落脚于人民的自由，必得落脚于人人可以我口说我心，人人可以用心做美梦。&lt;br /&gt;
生而为人，谁能不热爱自由？这自由，不仅是权利针对权力而言，也是宽恕针对报复而言，是般若针对无明而言，是仁爱针对暴虐而言，是有道针对无道而言。&lt;br /&gt;
大道之行，天下为公；万物自在，各正性命。这就是古人的梦想，先辈的梦想，也是今天很多人的梦想。&lt;br /&gt;
中国梦，自由梦，宪政梦。&lt;br /&gt;
万物速朽，但梦想永在。万物诞生，因梦想不灭。梦想就是生生之几，就是当你失败了一百次，那第一百零一次充实你内心的不死之希望。&lt;br /&gt;
依然有人倾听你的梦想，期待你敢于做梦。你从苦难中爬起，他们为你加油；你尝尽人世冷暖，他们为你加油；你收获美好生活，他们为你加油……他们别无所资，惟有对梦想的执着；他们别无所长，惟有对真相的追求。&lt;br /&gt;
一句真话能比整个世界还重，一个梦想能让生命迸射光芒！&lt;/p&gt;</content><category term="谈国是" /><summary>南方周末2013年新年献辞，转载防河蟹</summary></entry><entry><title>使用基于TCP的DNS解析服务防止DNS污染</title><link href="/2012/360/tcpdnsdns.html" rel="alternate" type="text/html" title="使用基于TCP的DNS解析服务防止DNS污染" /><published>2012-12-25T00:00:00+08:00</published><updated>2012-12-25T00:00:00+08:00</updated><id>/2012/360/tcpdnsdns</id><content type="html" xml:base="/2012/360/tcpdnsdns.html">&lt;p&gt;本文通过使用开源项目tcpdns帮助读者使用纯净的DNS服务。本文所提供的方案试图解决如下问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;大多数ISP网络中（避免使用代理，并高速的）访问被封锁的、有SSL而没被IP封锁的网站，其中比较著名的网站包括(Facebook, Google全系列服务, Youtube)。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;防止你的ISP通过DNS投毒插入广告&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果您对原理知识不感兴趣，您可以直接跳转到&lt;a href=&quot;#usage&quot;&gt;这里&lt;/a&gt;了解具体的使用方法。&lt;/p&gt;

&lt;h1 id=&quot;dns&quot;&gt;DNS污染&lt;/h1&gt;
&lt;p&gt;在之前的文章中已经讲过关于DNS污染的相关问题，这里大概复述一下。DNS污染的主要症状是解析出的IP地址明显不合法，用浏览器访问时显示连接超时或找不到服务器。DNS污染的主要手段是ISP或GFW发现非法DNS请求时，冒充正常的DNS服务器发送错误的解析结果。&lt;/p&gt;

&lt;h1 id=&quot;dns-1&quot;&gt;DNS污染的传统对策分析&lt;/h1&gt;
&lt;p&gt;应对DNS污染的传统对策包括：使用VPN、代理服务器、SOCKS5a标准端口转发等通用翻墙方法，以及修改Hosts文件的方法。同样，在CERNET2中的同学们也会使用hosts文件访问IPv6网站。以上方法的内在原理在于，通过可靠的信道获取正确的DNS信息，防止DNS污染。&lt;br /&gt;
传统对策的弱点在于：&lt;br /&gt;
1. 使用通用翻墙方法浪费大量代理服务器的带宽，事实上受污染的只有DNS数据，而代理服务器、VPN等通用翻墙方式将所有信息全部加密或通过代理转发。使用此方法的代价是传输速率的下降，以及严重依赖代理服务器的状态，设置复杂且容易出错。&lt;br /&gt;
2. 使用hosts文件方法事实上相当于自己构建了一个保留了“纯净”DNS信息的DNS服务器副本。这种方法灵活性非常差，而且使用不甚方便。如果要在不同网络状况下切换，每次都需要对hosts文件进行修改。&lt;/p&gt;

&lt;h1 id=&quot;dns-2&quot;&gt;应对DNS污染的新思路&lt;/h1&gt;
&lt;p&gt;通过分析发现，DNS污染之所以实现，是因为客户DNS请求使用UDP协议与服务器通信。UDP协议作为一个无连接协议，容易被中间人植入信息，并且难以被发现。GFW使用这个原理，冒充真正的DNS服务器发送错误的UDP包，从而使客户无法获得正确的IP地址。
同时可以注意到的是，DNS协议同样可以基于TCP协议实现。而由于TCP 协议是有连接协议，植入信息需要动态的对数据流做分析。代价很大因此GFW并没做这么做。因此，如果使用基于TCP的DNS解析服务，就可以应对目前GFW的DNS污染。&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;解决方案和代码&lt;/h1&gt;

&lt;h2 id=&quot;section-1&quot;&gt;解决方案&lt;/h2&gt;

&lt;p&gt;由于大多数操作系统无法设置DNS为使用TCP连接。因此解决方案设计为，在本地设置一个简单的DNS代理，它接受从操作系统发出的DNS请求（基于UDP），然后向可信的DNS服务器发送内容相同，但基于TCP的DNS请求，获得结果后通过UDP返回给操作系统。在操作系统看来，上述过程完全是虚拟的。只需要将系统的DNS服务器设置为本机即可。&lt;br /&gt;
&lt;a href=&quot;https://github.com/henices/Tcp-DNS-proxy&quot;&gt;这个项目&lt;/a&gt; 用Python实现了上述方案。在此基础上，项目&lt;a href=&quot;https://github.com/Ronald-Liu/Tcp-DNS-proxy&quot;&gt;Ronald/TCP-DNS-Proxy&lt;/a&gt; 为了方便更多人，尤其是Linux用户，的使用增加了对IPv6 DNS支持和自动修改resolv.conf的功能。&lt;br /&gt;
&lt;a id=&quot;usage&quot; name=&quot;usage&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;使用方法&lt;/h2&gt;

&lt;p&gt;下载处于ipv6分支下的tcpdns.py
你同样可以在本站下载稳定版的&lt;a href=&quot;/files/tcpdns.py&quot;&gt;tcpdns.py&lt;/a&gt;文件&lt;/p&gt;

&lt;h3 id=&quot;linux&quot;&gt;Linux用户&lt;/h3&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo python tcpdns.py&lt;/code&gt;启动。如果你使用DHCP，你可能需要手动在Network-Manager里或wicd里将DNS Server设置为127.0.0.1&lt;br /&gt;
如果你使用带有OpenRC的系统（如Gentoo, Debian），下载位于ipv6分支下的tcp-dns-proxy（你同样可以在本站下载稳定版本&lt;a href=&quot;/files/tcp-dns-proxy&quot;&gt;tcp-dns-proxy&lt;/a&gt;。编辑它，将APP_PATH设置为存放tcpdns.py的绝对地址。然后把tcp-dns-proxy 拷贝入/etc/init.d。最后用&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo rc-update add tcp-dns-proxy default&lt;/code&gt;使其默认启动。使用命令&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo /etc/init.d/tcp-dns-proxy start&lt;/code&gt;可以立即启动程序&lt;/p&gt;

&lt;h3 id=&quot;windows&quot;&gt;Windows用户&lt;/h3&gt;
&lt;p&gt;安装Python 2.7运行时环境&lt;br /&gt;
双击tcpdns.py&lt;br /&gt;
设置系统DNS为127.0.0.1&lt;/p&gt;</content><category term="GFW" /><category term="DNS" /><category term="TCP" /><summary>本文通过使用开源项目tcpdns帮助读者使用纯净的DNS服务。本文所提供的方案试图解决如下问题：</summary></entry><entry><title>在Linux下设置无线网络桥接</title><link href="/2012/360/how-tolinux.html" rel="alternate" type="text/html" title="在Linux下设置无线网络桥接" /><published>2012-12-25T00:00:00+08:00</published><updated>2012-12-25T00:00:00+08:00</updated><id>/2012/360/how-tolinux</id><content type="html" xml:base="/2012/360/how-tolinux.html">&lt;p&gt;很多同学在说Linux下配置网络桥接不如Windows方便，如果要共享网络链接很麻烦。其实如果各位能到墙外查查看，很多博客都介绍了如何在Linux下做网络桥接的姿势和动作要领。这里为大家介绍一下。
如果你遇到如下问题，这篇文章可以帮助你搞定。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;对如何在Linux下进行桥接完全没有概念&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在执行桥接命令时出现&lt;code class=&quot;highlighter-rouge&quot;&gt;cant add wlan0 to bridge br0: Operation not supported&lt;/code&gt;。
这是由于您的无线网卡没有处于AP模式。处于Managed模式的无线网卡无法进行桥接（不要挣扎了，Managed模式下的网卡没有足够多的信息做桥接，这是802.11规定的）。只要按如下所述使用hostapd即可解决问题&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在执行&lt;code class=&quot;highlighter-rouge&quot;&gt;iwconfig wlan0 mode Master&lt;/code&gt;时出现错误 &lt;br /&gt;
  Error for wireless request “Set Mode” (8B06) :
      SET failed on device wlan0 ; Invalid argument.
这说明您的网卡不支持硬件Master模式，您同样可以使用hostapd实现软Master模式解决问题。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;正确设置之后主机无法访问互联网。您可能需要刷新系统原有的路由表，并在br0上，而不是eth0上启动dhcpcd(dhclient)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section&quot;&gt;内核和内核支持&lt;/h1&gt;
&lt;p&gt;使用bridge功能需要内核支持，大多数预编译内核（如Fedora, Ubuntu等发行版默认安装的内核）都内建了bridge支持。在自编译内核中，你需要启用Networking support –&amp;gt; Networking options –&amp;gt; 802.1d Ethernet Bridging。如果编译为模块，可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;modprobe bridge&lt;/code&gt;将其加载。内核编译的知识和姿势请自行Google。&lt;/p&gt;

&lt;h1 id=&quot;hostapd&quot;&gt;设置hostapd&lt;/h1&gt;

&lt;p&gt;我知道有大神可以打开原生的AP(Master)模式。但是不管您是否能通过iwconfig打开AP模式，我都建议使用hostapd设置。安装hostapd的方法请自行Google。大多数发行版可以使用软件包管理器安装。&lt;br /&gt;
要设置一个简单的AP需要配置设置文件，以及启动hostapd程序。大多数操作都需要在root用户下操作。&lt;br /&gt;
在你认为合适的地方建立内容如下所述，文件名不那么重要的文件^_^：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;wlan0  
&lt;span class=&quot;nv&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;nl80211  
&lt;span class=&quot;nv&quot;&gt;ssid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;MyAP  
&lt;span class=&quot;nv&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这个文件使端口wlan0工作在1信道下，建立一个ssid为MyAP的热点。默认不启用加密。若需设置加密，或需要更多信息，请参考&lt;a href=&quot;http://linuxwireless.org/en/users/Documentation/hostapd&quot;&gt;这里&lt;/a&gt;&lt;br /&gt;
使用命令&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo hostapd /path/to/config/file&lt;/code&gt;启动hostapd，注意需要提供绝对路径。&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;建立设置网络桥接&lt;/h1&gt;
&lt;p&gt;网络桥接的配置需要使用brctl命令，在Gentoo下通过&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo emerge -av bridge-utils&lt;/code&gt;安装。
下面这段命令用于建立一个名叫br0的网桥。并把 wlan0 和 eth0 加入网桥&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ifconfig eth0 up  
ifconfig wlan0 up  
brctl addbr br0  
brctl addif br0 eth0  
brctl addif br0 wlan0  
ifconfig br0 up  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果没有返回错误，桥接就已经成功了。&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;新的路由项&lt;/h1&gt;
&lt;p&gt;需要注意的是，在完成桥接设置后，你需要重新设置路由表，使得default指向br0而不是eth0。要做到这一点，最方便的做法（如果你在一个使用dhcp的网络环境下）是使用&lt;code class=&quot;highlighter-rouge&quot;&gt;dhcpcd -k eth0 &amp;amp;&amp;amp; dhcpcd br0&lt;/code&gt;来重新设置路由。如果没有DHCP，那您需要手动删除eth0上绑定的IP地址，并在br0上进行设置，最后更改相应的路由表项。我假设如果您会手动配置网络，一定知道我在说什么^_*。&lt;br /&gt;
如果您想更方便的设置，wicd中可以在preference中将wired interface改为br0，然后使用wicd进行配置。如果您这么做，在网桥消失之后（比如重启计算机之后）您需要将刚才的设置改回eth0。&lt;/p&gt;</content><category term="Linux" /><category term="Network" /><summary>很多同学在说Linux下配置网络桥接不如Windows方便，如果要共享网络链接很麻烦。其实如果各位能到墙外查查看，很多博客都介绍了如何在Linux下做网络桥接的姿势和动作要领。这里为大家介绍一下。
如果你遇到如下问题，这篇文章可以帮助你搞定。</summary></entry><entry><title>同步FTP文件 in Linux</title><link href="/2012/359/how-toftp-in-linux.html" rel="alternate" type="text/html" title="同步FTP文件 in Linux" /><published>2012-12-24T00:00:00+08:00</published><updated>2012-12-24T00:00:00+08:00</updated><id>/2012/359/how-toftp-in-linux</id><content type="html" xml:base="/2012/359/how-toftp-in-linux.html">&lt;p&gt;新博客是Jekyll生成的静态网页，每次发布文章都需要重新生成网页并提交到服务器上。目前使用的服务器提供FTP。因此如果能通过某种方式将生成完的静态数据通过简单的方式同步到服务器上，一定会很爽。&lt;/p&gt;

&lt;p&gt;Google了一下看到了&lt;a href=&quot;http://www.kreci.net/linux/how-to-synchronize-your-files-by-ftp/&quot;&gt;这篇&lt;/a&gt;文章。这里转过来，方便不太懂英文的同学，以及被GFW折磨的同学。&lt;/p&gt;

&lt;h2 id=&quot;lftp&quot;&gt;1. 安装lftp&lt;/h2&gt;

&lt;p&gt;根据你的发行版不同，你需要使用不同的命令。比如我用的是Gentoo那么应该是这样的。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# emerge -av lftp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其他发行版可以到网上找教程安装&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;2. 建立一个同步配置文件&lt;/h2&gt;

&lt;p&gt;对于我来说，我需要将_site目录下的文件同步到服务器的根目录。而服务器地址是ronald-liu.ftp.narod.ru。在_site目录之上的目录下创建一个upload.lftp文件，内容大概是&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;open ftp://ronald-liu.ftp.narod.ru
user yourUsername yourPassword
mirror --delete -R --only-newer ./_site/ /
&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;各位根据自己的情况强势替换即可。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;3.一句话同步&lt;/h2&gt;
&lt;p&gt;如下命令可以帮助你一句话同步目录。你可以把它写到一个脚本文件里。或者像我一样写到Rakefile里，方便生成之后立即进行同步
&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
lftp -f -v upload.lftp
&lt;/code&gt;&lt;/p&gt;</content><category term="Linux" /><summary>新博客是Jekyll生成的静态网页，每次发布文章都需要重新生成网页并提交到服务器上。目前使用的服务器提供FTP。因此如果能通过某种方式将生成完的静态数据通过简单的方式同步到服务器上，一定会很爽。</summary></entry><entry><title>新的一夜 新的一页</title><link href="/2012/358/newpage.html" rel="alternate" type="text/html" title="新的一夜 新的一页" /><published>2012-12-23T00:00:00+08:00</published><updated>2012-12-23T00:00:00+08:00</updated><id>/2012/358/newpage</id><content type="html" xml:base="/2012/358/newpage.html">&lt;p&gt;真心不想再为博客的事情难过了。累了，想办法落脚才是王道。&lt;/p&gt;

&lt;p&gt;jekyll是个好东西。但是真心的，如果这东西是用python写的，我会更加高兴的。 
主题还是要定制一下比较好。网站的副标题，我想就当作心情了，想到的时候就更新一下。&lt;br /&gt;
rake貌似很强大的样子，回头研究。&lt;br /&gt;
感谢&lt;a href=&quot;xyang.chongqinglug.org&quot;&gt;xyang.cq&lt;/a&gt;提供主机，感谢jekyll和jekyll-bootstrap&lt;br /&gt;
最近联合xyang.cn，准备写一个关于GFW的系列文章，和大家分享。请使劲提建议，用力拍砖。&lt;/p&gt;</content><category term="杂谈" /><summary>真心不想再为博客的事情难过了。累了，想办法落脚才是王道。</summary></entry><entry><title>通过命令获取VirtualBox虚拟机Guest的IP地址</title><link href="/2012/348/how-tovirtualboxguestip.html" rel="alternate" type="text/html" title="通过命令获取VirtualBox虚拟机Guest的IP地址" /><published>2012-12-13T00:00:00+08:00</published><updated>2012-12-13T00:00:00+08:00</updated><id>/2012/348/how-tovirtualboxguestip</id><content type="html" xml:base="/2012/348/how-tovirtualboxguestip.html">&lt;p&gt;最近在做驱动开发，需要在虚拟机和主机之间同步代码和文件。Guest通过Bridge方式上网。我的想法是写个脚本用rsync同步，可是由于Bridge进局域网之后IP会随DHCP配置改变而改变，因此需要通过命令获取Guest对应的IP地址。（我知道可以用Shared Folder，但是我总是配置不好那个Guest Addition。而且那个东西效率差的一X）&lt;/p&gt;

&lt;p&gt;查了文档，发现这个问题不是很复杂。用VBoxManage的命令可以方便的获取IP地址。下面命令会返回一个差不多我们想要的&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;VBoxManage guestproperty get &lt;span class=&quot;s2&quot;&gt;&quot;abc&quot;&lt;/span&gt; /VirtualBox/GuestInfo/Net/0/V4/IP
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中abc是你虚拟机的名称，你可以使用如下命令列出所有注册过的虚拟机&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;VBoxManage list vms
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;后面那串乱码是所谓的UUID，在前一个代码里的”abc”也可以用它对应的UUID代替，那样你的代码会显得，俄，更加犀利以及难懂一些~_^&lt;/p&gt;

&lt;p&gt;也许某些同学会注意到，命令除了返回IP地址之外，还有一个Value:。这些字符如果传给ssh,rsync等程序必然会引起错误。解决方法是用tr命令在输入之前把多余的字符去掉，注意，返回值末尾有一个\n，同样需要去掉。以下代码用于自动在主机的a文件夹和Guest的a文件夹之间同步。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;guestIP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;VBoxManage guestproperty get &lt;span class=&quot;s2&quot;&gt;&quot;abc&quot;&lt;/span&gt; /VirtualBox/GuestInfo/Net/0/V4/IP | tr -d &lt;span class=&quot;s2&quot;&gt;&quot;[&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Value: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;]&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;  
rsync -avz -e ssh ronald@&lt;span class=&quot;nv&quot;&gt;$guestIP&lt;/span&gt;:/home/ronald/a a 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;ronald是俺在Guest中的用户名..&lt;/p&gt;</content><summary>最近在做驱动开发，需要在虚拟机和主机之间同步代码和文件。Guest通过Bridge方式上网。我的想法是写个脚本用rsync同步，可是由于Bridge进局域网之后IP会随DHCP配置改变而改变，因此需要通过命令获取Guest对应的IP地址。（我知道可以用Shared Folder，但是我总是配置不好那个Guest Addition。而且那个东西效率差的一X）</summary></entry><entry><title>FixJWC2.0</title><link href="/2012/197/fixjwc20.html" rel="alternate" type="text/html" title="FixJWC2.0" /><published>2012-07-15T00:00:00+08:00</published><updated>2012-07-15T00:00:00+08:00</updated><id>/2012/197/fixjwc20</id><content type="html" xml:base="/2012/197/fixjwc20.html">&lt;p&gt;重庆大学教务处网站作为一个无节操的IE Only网站，居然堂而皇之的运行了一个学期。学校居然想改的动静都没有。上个寒假，鄙人尝试开发Fix JWC项目以使教务系统可以正常的在Chrome/Chromium和Firefox浏览器上显示和使用。fixJWC第一版完成了对于老教务系统的修复。&lt;/p&gt;

&lt;p&gt;不幸的是，学校切换到了新的教务系统。新教务系统不能正常使用主要有两方面原因。1、在Chrome/Chromium上无法登陆，2、在非IE浏览器中导航栏不能正常使用。 &lt;br /&gt;
对于登陆问题。由于受到Same-Origin原则的限制，无法使用其他域（甚至是本地的）网页替换并代理登陆。因此只能开发一个插件，对教务处首页进行代码插入，辅助用户登陆。 &lt;br /&gt;
对于导航栏问题，鄙人使用了一部分教务处系统原来的代码，将其中与显示相关的ShowBar, ToLink, addLinkBlock, addLinkGroup几个函数重新实现，并使用新的菜单栏显示代码生成导航栏。直接调用原有的信息网页到一个单独的iframe里解决问题。&lt;/p&gt;

&lt;p&gt;下一步工作主要有：&lt;br /&gt;
* 添加Firefox支持，因为完全使用JS实现，因此工作量应该不大。&lt;br /&gt;
* 集成修复老教务系统的那些代码
* 找个更好的名字，这个名字好像有点俗
* 求大家帮忙画个图标
* 把操作界面弄好看一些
有兴趣一起开发的同学欢迎欢迎联系我。看过我代码的求轻吐槽。。。。 &lt;br /&gt;
Ronald于2012-7-14午夜&lt;/p&gt;</content><category term="JavaScript" /><category term="Chrome" /><summary>重庆大学教务处网站作为一个无节操的IE Only网站，居然堂而皇之的运行了一个学期。学校居然想改的动静都没有。上个寒假，鄙人尝试开发Fix JWC项目以使教务系统可以正常的在Chrome/Chromium和Firefox浏览器上显示和使用。fixJWC第一版完成了对于老教务系统的修复。</summary></entry><entry><title>一个用来把gfwList里网址转换成IP的脚本</title><link href="/2011/231/gfwlistip.html" rel="alternate" type="text/html" title="一个用来把gfwList里网址转换成IP的脚本" /><published>2011-08-19T00:00:00+08:00</published><updated>2011-08-19T00:00:00+08:00</updated><id>/2011/231/gfwlistip</id><content type="html" xml:base="/2011/231/gfwlistip.html">&lt;p&gt;ZZJ于8月17日提出用gfwList的网址通过可信的DNS转换成IP，写入hosts文件进而实现翻墙的方法。鄙人通过Python脚本进行了实现。代码丑陋望大牛指教。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;DNS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;base64&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;splitList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	
	&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#empty line&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#Comment line&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@@&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#Forbidding line&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#URL is ignored, only domains left&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
		
		&lt;span class=&quot;c&quot;&gt;#In this case, domain name is irrelevant to protocol(http or https)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;||&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;
	
	

&lt;span class=&quot;c&quot;&gt;#Decode and decorate the input string&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;gfwlist.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decodestring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;domains&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;splitList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#Set default DNS server&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DNSServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;8.8.8.8&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DNS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;server&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DNSServer&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;DNS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DiscoverNameServers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#These two varible are used to track the percentage of parsing process.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;domains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;domains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DNS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DNS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DNSError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Time Out&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;answers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;No record&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Bingo&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;answers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;文中使用了模块pyDNS,这一非标准模块需要到http://pydns.sourceforge.net/下载。&lt;br /&gt;
解压后安装，&lt;code class=&quot;highlighter-rouge&quot;&gt;python setup.py install&lt;/code&gt; 
然后运行程序，只需要将标准输出重定向到指定文件即可。&lt;code class=&quot;highlighter-rouge&quot;&gt;python makeIP.py &amp;gt; hosts&lt;/code&gt;&lt;br /&gt;
接一句Fvck GFW&lt;/p&gt;

&lt;p&gt;PS:21:51更新，增加了过滤CNAME记录的功能，解决有跳转网站的解析问题，请下载最新的代码文件&lt;/p&gt;

&lt;p&gt;2012-4-4:有些同学在问gfwList是用什么加密的，其实gfwList只是用Base64编码进行了压缩，只需要用相应的软件即可解码，详情请见维基百科。这个脚本里用的是Python中自带的base64模块。&lt;/p&gt;</content><category term="Python" /><category term="gfwList" /><summary>ZZJ于8月17日提出用gfwList的网址通过可信的DNS转换成IP，写入hosts文件进而实现翻墙的方法。鄙人通过Python脚本进行了实现。代码丑陋望大牛指教。</summary></entry></feed>
